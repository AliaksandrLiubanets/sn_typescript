{"version":3,"file":"static/js/432.f9dc8f5b.chunk.js","mappings":"6PAcMA,EAAWC,EAAAA,MAAW,WAExB,IAAMC,GAAWC,EAAAA,EAAAA,MACVC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAAtBF,OACAG,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IAAzBD,UAgBP,OAPAE,EAAAA,EAAAA,YAAU,WAEN,OADAP,GAASQ,EAAAA,EAAAA,OACF,WACHR,GAASS,EAAAA,EAAAA,UAEd,CAACT,KAEG,yBACS,UAAXE,GAAqB,sEAClB,iBAAKQ,UAAWC,EAAAA,EAAAA,WAAhB,WACI,SAACC,EAAD,KACA,SAAC,IAAD,CAAYC,WAlBG,SAACC,GACR,OAAZA,GAAgC,KAAZA,GAGxBd,GAASe,EAAAA,EAAAA,IAAYD,KAeDE,IAAKX,EACLY,SAAqB,UAAXf,EACVgB,SAAS,EACTC,gBAAc,YAO7BP,EAAeb,EAAAA,MAAW,WAEnC,IAAOqB,GAAYjB,EAAAA,EAAAA,IAAYC,EAAAA,IAAxBgB,SACDC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OANAlB,EAAAA,EAAAA,YAAU,WACY,IAAD,EAAdiB,IACC,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,EAAUI,KAEP,iBAAKK,MAAO,CAAC,OAAU,QAAS,UAAa,QACxCC,SAjBU,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cAEfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5Ed,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UAEFL,EAASmB,KAAI,SAACC,GAAD,OAAO,SAAC,IAAD,CAAS1B,QAAS0B,GAAQA,EAAEC,QACjD,gBAAKC,IAAKrB,UAIlB,UAtEqB,WACjB,OAAO,0BACH,SAACvB,EAAD","sources":["components/Chat/ChatPage.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../Redux/chat-reducer'\r\nimport {authSelector, chatSelector} from '../../selectors/selectors'\r\nimport p from '../Profile/Profile.module.css'\r\nimport {AddMessage} from '../Dialogs/AddMessage'\r\nimport {Message} from '../Dialogs/MessageField/Message'\r\n\r\nconst ChatPage: FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {status} = useSelector(chatSelector)\r\n    const {ownAvatar} = useSelector(authSelector)\r\n\r\n    const sendMessageHandler = (message: string) => {\r\n        if (message === '\\n' || message === '') {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return <div>\r\n        {status === 'error' ? <div>Some error occured. Please refresh page</div> :\r\n            <div className={p.page_block}>\r\n                <Messages/>\r\n                <AddMessage addMessage={sendMessageHandler}\r\n                            url={ownAvatar}\r\n                            disabled={status !== 'ready'}\r\n                            padding={true}\r\n                            isOnEnterPress\r\n                />\r\n            </div>\r\n        }\r\n    </div>\r\n})\r\n\r\nexport const Messages: FC = React.memo(() => {\r\n\r\n    const {messages} = useSelector(chatSelector)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget\r\n\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages, isAutoScroll])\r\n\r\n    return <div style={{'height': '400px', 'overflowY': 'auto'}}\r\n                onScroll={scrollHandler}>\r\n        {messages.map((m) => <Message message={m} key={m.id}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n})\r\n\r\nexport default ChatPage"],"names":["Chat","React","dispatch","useDispatch","status","useSelector","chatSelector","ownAvatar","authSelector","useEffect","startMessagesListening","stopMessagesListening","className","p","Messages","addMessage","message","sendMessage","url","disabled","padding","isOnEnterPress","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","id","ref"],"sourceRoot":""}
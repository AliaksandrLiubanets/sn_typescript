{"version":3,"file":"static/js/432.d9f5dce2.chunk.js","mappings":"yTAkBMA,EAAW,WAEb,IAAMC,GAAWC,EAAAA,EAAAA,MACVC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAAtBF,OACAG,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IAAzBD,UAaP,OAPAE,EAAAA,EAAAA,YAAU,WAEN,OADAP,GAASQ,EAAAA,EAAAA,OACF,WACHR,GAASS,EAAAA,EAAAA,UAEd,KAEI,yBACS,UAAXP,GAAqB,sEAClB,iBAAKQ,UAAWC,EAAAA,EAAAA,WAAhB,WACI,SAACC,EAAD,KACA,SAAC,IAAD,CAAYC,WAfG,SAACC,GACxBd,GAASe,EAAAA,EAAAA,IAAYD,KAeDE,IAAKX,EACLY,SAAqB,UAAXf,EACVgB,SAAS,UAOxBN,EAAe,WAExB,IAAOO,GAAYhB,EAAAA,EAAAA,IAAYC,EAAAA,IAAxBe,SACDC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OANAjB,EAAAA,EAAAA,YAAU,WACY,IAAD,EAAdgB,IACC,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,EAAUI,KAEP,iBAAKK,MAAO,CAAC,OAAU,QAAS,UAAa,QACxCC,SAjBU,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cAEfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5Ed,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UAEFL,EAASmB,KAAI,SAACC,GAAD,OAAO,SAACC,EAAD,CAAS1B,QAASyB,GAAQA,EAAEE,QACjD,gBAAKC,IAAKtB,QAMLoB,EAA2BG,EAAAA,MAAW,YAAgB,IAAd7B,EAAa,EAAbA,QAEjD,OAAO,iBAAKJ,UAAWkC,EAAAA,EAAAA,cAAhB,WACH,iBAAKlC,UAAWkC,EAAAA,EAAAA,iBAAhB,WACI,SAAC,IAAD,CAAe5B,IAAKF,EAAQ+B,SAC5B,SAAC,IAAD,CAAeC,OAAQhC,EAAQiC,eAEnC,gBAAKrC,UAAWkC,EAAAA,EAAAA,SAChB,SAAC,IAAD,CAAaI,KAAMlC,EAAQA,gBAInC,UAhFqB,WACjB,OAAO,0BACH,SAACf,EAAD","sources":["components/Chat/ChatPage.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef, useState} from 'react'\r\nimport {ChatMessageAPIType} from '../../api/chat-api'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../Redux/chat-reducer'\r\nimport {authSelector, chatSelector} from '../../selectors/selectors'\r\nimport p from '../Profile/Profile.module.css'\r\nimport s from '../common/Message/Message.module.css'\r\nimport {MessageAuthor} from '../common/Message/MessageAuthor'\r\nimport {MessageText} from '../common/Message/MessageText'\r\nimport {MessageAvatar} from '../common/Message/MessageAvatar'\r\nimport {AddMessage} from '../Dialogs/AddMessage'\r\n\r\nconst ChatPage: FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {status} = useSelector(chatSelector)\r\n    const {ownAvatar} = useSelector(authSelector)\r\n\r\n    const sendMessageHandler = (message: string) => {\r\n        dispatch(sendMessage(message))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' ? <div>Some error occured. Please refresh page</div> :\r\n            <div className={p.page_block}>\r\n                <Messages/>\r\n                <AddMessage addMessage={sendMessageHandler}\r\n                            url={ownAvatar}\r\n                            disabled={status !== 'ready'}\r\n                            padding={true}\r\n                />\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport const Messages: FC = () => {\r\n\r\n    const {messages} = useSelector(chatSelector)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget\r\n\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages, isAutoScroll])\r\n\r\n    return <div style={{'height': '400px', 'overflowY': 'auto'}}\r\n                onScroll={scrollHandler}>\r\n        {messages.map((m) => <Message message={m} key={m.id}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\ntype MessageType = { message: ChatMessageAPIType }\r\n\r\nexport const Message: FC<MessageType> = React.memo(({message}) => {\r\n\r\n    return <div className={s.message_block}>\r\n        <div className={s.ava_name_message}>\r\n            <MessageAvatar url={message.photo}/>\r\n            <MessageAuthor author={message.userName}/>\r\n        </div>\r\n        <div className={s.angle}></div>\r\n        <MessageText text={message.message}/>\r\n    </div>\r\n})\r\n\r\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","status","useSelector","chatSelector","ownAvatar","authSelector","useEffect","startMessagesListening","stopMessagesListening","className","p","Messages","addMessage","message","sendMessage","url","disabled","padding","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","id","ref","React","s","photo","author","userName","text"],"sourceRoot":""}